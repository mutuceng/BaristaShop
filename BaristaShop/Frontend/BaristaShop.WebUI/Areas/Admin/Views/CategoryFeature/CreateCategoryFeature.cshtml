@model CreateCategoryFeatureViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/AdminLayout/_AdminLayout.cshtml";
}

<section class="content container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="chart-box">
                <h4>Özellik Ekleme</h4>
                <br />
                <div class="bs-example" data-example-id="bordered-table">
                    <form method="post" asp-controller="CategoryFeature" asp-action="CreateCategoryFeature">
                        <div id="feature-container">
                            <label>Özellik İsmi</label>
                            <input type="text" name="CategoryFeatureName" class="form-control" />

                            <label>Kategori Özellik için Değerler</label>
                            <select id="secimler" class="form-control" multiple>
                                @if (ViewBag.CategoryFeatureValues != null)
                                {
                                    foreach (var item in (List<SelectListItem>)ViewBag.CategoryFeatureValues)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                                else
                                {
                                    <option value="">Değer bulunamadı</option>
                                }
                            </select>
                            <div id="selectedOptions" class="mt-2"></div>
                            <input type="hidden" id="SelectedFeatures" name="CategoryFeatureValues" value="" />
                        </div>
                        <br />
                        <button type="submit" class="btn btn-primary">Kategori Özelliği Ekle</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    const selectElement = document.getElementById('secimler');
    const selectedOptionsDiv = document.getElementById('selectedOptions');
    const hiddenField = document.getElementById('SelectedFeatures');
    const selectedValues = new Set(); // Seçilen değerlerin tekrarını önlemek için Set kullanıyoruz

    // Select kutusundaki değişiklikleri dinle
    selectElement.addEventListener('dblclick', function () {
        const selectedOptionText = selectElement.options[selectElement.selectedIndex].text;
        const selectedOptionValue = selectElement.value;

        // Eğer seçenek daha önce seçilmişse ekleme
        if (!selectedValues.has(selectedOptionValue)) {
            selectedValues.add(selectedOptionValue);

            // Yeni kutu oluştur
            const box = document.createElement('div');
            box.className = 'selected-box mt-1 p-2 border rounded';
            box.style.display = "inline-block";
            box.style.marginRight = "10px";
            box.innerHTML = `${selectedOptionText} <span class="remove-btn" style="color: red; cursor: pointer;">&times;</span>`;

            // Kutuya çarpı işareti tıklama olayını ekle
            box.querySelector('.remove-btn').addEventListener('click', function () {
                selectedValues.delete(selectedOptionValue); // Seçim set'ten kaldırılıyor
                box.remove(); // Kutu siliniyor
                updateHiddenField(); // Seçimler değişince hidden field'ı güncelle
            });

            // Kutu div'e ekle
            selectedOptionsDiv.appendChild(box);
        }
        updateHiddenField();
        console.log(hiddenField.value);
    });

    function updateHiddenField() {
        hiddenField.value = Array.from(selectedValues).join(','); // Değerleri `"id12345"` formatında virgülle birleştir
    }
</script>

